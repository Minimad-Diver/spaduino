// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Spa.pb.h"

@implementation SpaRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SpaRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Temperature ()
@property Float32 temperature;
@property Float32 setPoint;
@property Float32 derivative;
@property int32_t triggerState;
@end

@implementation Temperature

- (BOOL) hasTemperature {
  return !!hasTemperature_;
}
- (void) setHasTemperature:(BOOL) value_ {
  hasTemperature_ = !!value_;
}
@synthesize temperature;
- (BOOL) hasSetPoint {
  return !!hasSetPoint_;
}
- (void) setHasSetPoint:(BOOL) value_ {
  hasSetPoint_ = !!value_;
}
@synthesize setPoint;
- (BOOL) hasDerivative {
  return !!hasDerivative_;
}
- (void) setHasDerivative:(BOOL) value_ {
  hasDerivative_ = !!value_;
}
@synthesize derivative;
- (BOOL) hasTriggerState {
  return !!hasTriggerState_;
}
- (void) setHasTriggerState:(BOOL) value_ {
  hasTriggerState_ = !!value_;
}
@synthesize triggerState;
- (id) init {
  if ((self = [super init])) {
    self.temperature = 0;
    self.setPoint = 0;
    self.derivative = 0;
    self.triggerState = 0;
  }
  return self;
}
static Temperature* defaultTemperatureInstance = nil;
+ (void) initialize {
  if (self == [Temperature class]) {
    defaultTemperatureInstance = [[Temperature alloc] init];
  }
}
+ (Temperature*) defaultInstance {
  return defaultTemperatureInstance;
}
- (Temperature*) defaultInstance {
  return defaultTemperatureInstance;
}
- (BOOL) isInitialized {
  if (!self.hasTemperature) {
    return NO;
  }
  if (!self.hasSetPoint) {
    return NO;
  }
  if (!self.hasDerivative) {
    return NO;
  }
  if (!self.hasTriggerState) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTemperature) {
    [output writeFloat:1 value:self.temperature];
  }
  if (self.hasSetPoint) {
    [output writeFloat:2 value:self.setPoint];
  }
  if (self.hasDerivative) {
    [output writeFloat:3 value:self.derivative];
  }
  if (self.hasTriggerState) {
    [output writeInt32:4 value:self.triggerState];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTemperature) {
    size_ += computeFloatSize(1, self.temperature);
  }
  if (self.hasSetPoint) {
    size_ += computeFloatSize(2, self.setPoint);
  }
  if (self.hasDerivative) {
    size_ += computeFloatSize(3, self.derivative);
  }
  if (self.hasTriggerState) {
    size_ += computeInt32Size(4, self.triggerState);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Temperature*) parseFromData:(NSData*) data {
  return (Temperature*)[[[Temperature builder] mergeFromData:data] build];
}
+ (Temperature*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Temperature*)[[[Temperature builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Temperature*) parseFromInputStream:(NSInputStream*) input {
  return (Temperature*)[[[Temperature builder] mergeFromInputStream:input] build];
}
+ (Temperature*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Temperature*)[[[Temperature builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Temperature*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Temperature*)[[[Temperature builder] mergeFromCodedInputStream:input] build];
}
+ (Temperature*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Temperature*)[[[Temperature builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Temperature_Builder*) builder {
  return [[Temperature_Builder alloc] init];
}
+ (Temperature_Builder*) builderWithPrototype:(Temperature*) prototype {
  return [[Temperature builder] mergeFrom:prototype];
}
- (Temperature_Builder*) builder {
  return [Temperature builder];
}
- (Temperature_Builder*) toBuilder {
  return [Temperature builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTemperature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"temperature", [NSNumber numberWithFloat:self.temperature]];
  }
  if (self.hasSetPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"setPoint", [NSNumber numberWithFloat:self.setPoint]];
  }
  if (self.hasDerivative) {
    [output appendFormat:@"%@%@: %@\n", indent, @"derivative", [NSNumber numberWithFloat:self.derivative]];
  }
  if (self.hasTriggerState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"triggerState", [NSNumber numberWithInt:self.triggerState]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Temperature class]]) {
    return NO;
  }
  Temperature *otherMessage = other;
  return
      self.hasTemperature == otherMessage.hasTemperature &&
      (!self.hasTemperature || self.temperature == otherMessage.temperature) &&
      self.hasSetPoint == otherMessage.hasSetPoint &&
      (!self.hasSetPoint || self.setPoint == otherMessage.setPoint) &&
      self.hasDerivative == otherMessage.hasDerivative &&
      (!self.hasDerivative || self.derivative == otherMessage.derivative) &&
      self.hasTriggerState == otherMessage.hasTriggerState &&
      (!self.hasTriggerState || self.triggerState == otherMessage.triggerState) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTemperature) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.temperature] hash];
  }
  if (self.hasSetPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.setPoint] hash];
  }
  if (self.hasDerivative) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.derivative] hash];
  }
  if (self.hasTriggerState) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.triggerState] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Temperature_Builder()
@property (strong) Temperature* result;
@end

@implementation Temperature_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Temperature alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Temperature_Builder*) clear {
  self.result = [[Temperature alloc] init];
  return self;
}
- (Temperature_Builder*) clone {
  return [Temperature builderWithPrototype:result];
}
- (Temperature*) defaultInstance {
  return [Temperature defaultInstance];
}
- (Temperature*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Temperature*) buildPartial {
  Temperature* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Temperature_Builder*) mergeFrom:(Temperature*) other {
  if (other == [Temperature defaultInstance]) {
    return self;
  }
  if (other.hasTemperature) {
    [self setTemperature:other.temperature];
  }
  if (other.hasSetPoint) {
    [self setSetPoint:other.setPoint];
  }
  if (other.hasDerivative) {
    [self setDerivative:other.derivative];
  }
  if (other.hasTriggerState) {
    [self setTriggerState:other.triggerState];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Temperature_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Temperature_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setTemperature:[input readFloat]];
        break;
      }
      case 21: {
        [self setSetPoint:[input readFloat]];
        break;
      }
      case 29: {
        [self setDerivative:[input readFloat]];
        break;
      }
      case 32: {
        [self setTriggerState:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTemperature {
  return result.hasTemperature;
}
- (Float32) temperature {
  return result.temperature;
}
- (Temperature_Builder*) setTemperature:(Float32) value {
  result.hasTemperature = YES;
  result.temperature = value;
  return self;
}
- (Temperature_Builder*) clearTemperature {
  result.hasTemperature = NO;
  result.temperature = 0;
  return self;
}
- (BOOL) hasSetPoint {
  return result.hasSetPoint;
}
- (Float32) setPoint {
  return result.setPoint;
}
- (Temperature_Builder*) setSetPoint:(Float32) value {
  result.hasSetPoint = YES;
  result.setPoint = value;
  return self;
}
- (Temperature_Builder*) clearSetPoint {
  result.hasSetPoint = NO;
  result.setPoint = 0;
  return self;
}
- (BOOL) hasDerivative {
  return result.hasDerivative;
}
- (Float32) derivative {
  return result.derivative;
}
- (Temperature_Builder*) setDerivative:(Float32) value {
  result.hasDerivative = YES;
  result.derivative = value;
  return self;
}
- (Temperature_Builder*) clearDerivative {
  result.hasDerivative = NO;
  result.derivative = 0;
  return self;
}
- (BOOL) hasTriggerState {
  return result.hasTriggerState;
}
- (int32_t) triggerState {
  return result.triggerState;
}
- (Temperature_Builder*) setTriggerState:(int32_t) value {
  result.hasTriggerState = YES;
  result.triggerState = value;
  return self;
}
- (Temperature_Builder*) clearTriggerState {
  result.hasTriggerState = NO;
  result.triggerState = 0;
  return self;
}
@end

