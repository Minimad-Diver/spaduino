### Generated by rprotoc. DO NOT EDIT!
### <proto file: proto/Spa.proto>
# 
# message SpaMessage
# {
#     required string class_name = 1;
#     optional bytes message = 2;
# }
# 
# message States
# {
#     enum Aux
#     {
#         aOff = 0;
#         aOn = 1;
#         aNone = 100;
#     }
# 
#     enum Pump
#     {
#         pError = 0;
#         pOff = 1;
#         pOn = 2;
#         pHeat = 3;
#         pNone = 100;
#     }
# 
#     enum Mode
#     {
#         mError = 0;
#         mInit = 1;
#         mOff = 2;
#         mAuto = 3;
#         mRapid = 4;
#         mSoak = 5;
#         mNone = 100;
#     }
# 
#     enum Status
#     {
#         eOk = 0;
#         eUnknown = 1;
#         eTemperatureSensor = 2;
#         eWaterLevelSensor = 3;
#         eHighLimit = 4;
#     }
# 
#     required int32 aux = 1 [default = 100];
#     required int32 pump = 2 [default = 100];
#     required int32 mode = 3 [default = 100];
#     required int32 status = 4 [default = 0];
# }
# 
# message Relays
# {
#     required bool safety = 1;
#     required bool pump = 2;
#     required bool heat = 3;
#     required bool aux = 4;
# }
# 
# message Temperature
# {
#     required float temperature = 1;
#     required float set_point = 2;
#     required float derivative = 3;
#     required int32 trigger_state = 4;
# }
# 
# message ScheduleTimers
# {
#     required uint32 period = 1;
#     required uint32 min_duty = 2;
#     required uint32 max_duty = 3;
#     required uint64 cycle_start = 4;
#     required uint32 manual_duration = 5;
#     required uint32 cycle_elapsed = 6;
#     required uint32 duty_elapsed = 7;
# }

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

class SpaMessage < ::Protobuf::Message
  defined_in __FILE__
  required :string, :class_name, 1
  optional :bytes, :message, 2
end
class States < ::Protobuf::Message
  defined_in __FILE__
  class Aux < ::Protobuf::Enum
    defined_in __FILE__
    AOff = value(:aOff, 0)
    AOn = value(:aOn, 1)
    ANone = value(:aNone, 100)
  end
  class Pump < ::Protobuf::Enum
    defined_in __FILE__
    PError = value(:pError, 0)
    POff = value(:pOff, 1)
    POn = value(:pOn, 2)
    PHeat = value(:pHeat, 3)
    PNone = value(:pNone, 100)
  end
  class Mode < ::Protobuf::Enum
    defined_in __FILE__
    MError = value(:mError, 0)
    MInit = value(:mInit, 1)
    MOff = value(:mOff, 2)
    MAuto = value(:mAuto, 3)
    MRapid = value(:mRapid, 4)
    MSoak = value(:mSoak, 5)
    MNone = value(:mNone, 100)
  end
  class Status < ::Protobuf::Enum
    defined_in __FILE__
    EOk = value(:eOk, 0)
    EUnknown = value(:eUnknown, 1)
    ETemperatureSensor = value(:eTemperatureSensor, 2)
    EWaterLevelSensor = value(:eWaterLevelSensor, 3)
    EHighLimit = value(:eHighLimit, 4)
  end
  required :int32, :aux, 1, :default => 100
  required :int32, :pump, 2, :default => 100
  required :int32, :mode, 3, :default => 100
  required :int32, :status, 4, :default => 0
end
class Relays < ::Protobuf::Message
  defined_in __FILE__
  required :bool, :safety, 1
  required :bool, :pump, 2
  required :bool, :heat, 3
  required :bool, :aux, 4
end
class Temperature < ::Protobuf::Message
  defined_in __FILE__
  required :float, :temperature, 1
  required :float, :set_point, 2
  required :float, :derivative, 3
  required :int32, :trigger_state, 4
end
class ScheduleTimers < ::Protobuf::Message
  defined_in __FILE__
  required :uint32, :period, 1
  required :uint32, :min_duty, 2
  required :uint32, :max_duty, 3
  required :uint64, :cycle_start, 4
  required :uint32, :manual_duration, 5
  required :uint32, :cycle_elapsed, 6
  required :uint32, :duty_elapsed, 7
end